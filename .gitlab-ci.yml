stages:
  - package
  - docker_build
  - deploy_k8s

variables:
  KUBECONFIG: /etc/deploy/config
  MAVEN_OPTS: "-Dmaven.repo.local=/root/.m2/repository"

mvn_build_job:
  image: maven:3.6.2-jdk-14
  stage: package
  tags:
    - k8s-runner
  script:
    - echo "🚀 开始 Maven 构建..."
    - mvn clean package -B -DskipTests
    - ls -l target
    # ✅ 避免“同文件”报错
    - |
      if ls target/*.jar 1>/dev/null 2>&1; then
        cp $(ls target/*.jar | head -n 1) target/app.jar
      elif ls target/*.war 1>/dev/null 2>&1; then
        cp $(ls target/*.war | head -n 1) target/app.war
      else
        echo "❌ 未找到 jar 或 war 包"
        exit 1
      fi
  artifacts:
    paths:
      - target/app.jar
      - target/app.war
    expire_in: 1h

docker_build_job:
  image: gcr.io/kaniko-project/executor:debug
  stage: docker_build
  tags:
    - k8s-runner
  script:
    # 1. 写入 Docker Registry 凭证
    - |
      echo "{\"auths\":{\"crpi-29ns4nxq5xxuk3v4.cn-hangzhou.personal.cr.aliyuncs.com\":{
        \"username\":\"$DOCKER_USER\",
        \"password\":\"$DOCKER_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # 2. 调用 Kaniko 构建并推送镜像
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination=crpi-29ns4nxq5xxuk3v4.cn-hangzhou.personal.cr.aliyuncs.com/javademo:$CI_PIPELINE_ID

deploy_k8s_job:
  image: registry.cn-hangzhou.aliyuncs.com/haoshuwei24/kubectl:1.16.6
  stage: deploy_k8s
  tags:
    - k8s-runner
  script:
    - echo "🚀 部署到 K8s 集群..."
    - mkdir -p /etc/deploy
    - echo $kube_config | base64 -d > $KUBECONFIG
    - sed -i "s/IMAGE_TAG/$CI_PIPELINE_ID/g" deployment.yaml
    - cat deployment.yaml
    - kubectl apply -f deployment.yaml


